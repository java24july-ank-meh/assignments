-/*2.1*/
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO is NULL;
/*2.2*/
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT * FROM CUSTOMER ORDER BY CITY ASC;
/*2.3*/
INSERT INTO GENRE (GENREID, NAME) VALUES (26, 'Trip Hop');
INSERT INTO GENRE (GENREID, NAME) VALUES (27, 'Electronica');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES (9, 'SMITH', 'JOHN', 'IT Staff', 2, TO_DATE('1/JAN/80'), TO_DATE('25/FEB/04'), '123 Generic St.', 'Lethbridge', 'AB', 'Canada','T1H 1Y8', '+1 (403) 123-4567', '+1 (403) 765-4321', 'smith@chinookcorp.com');
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES (10, 'Doe', 'Jane', 'IT Staff', 2, TO_DATE('1/FEB/80'), TO_DATE('25/MAR/04'), '123 Plain St.', 'Lethbridge', 'AB', 'Canada','T1H 1Y8', '+1 (403) 123-8743', '+1 (403) 374-8732', 'doe@chinookcorp.com');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES (60, 'Made', 'Up', 'The Company', '12144 Whatever Rd.', 'Reston', 'TX', 'United States', '20190', '+1 (143) 762-2343', '+1 (490) 824-9180', 'made.up@gmail.com', 4);
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, EMAIL, SUPPORTREPID)
VALUES (61, 'Hello', 'World', '5543 Someplace Boulevard', 'Austin', 'TX', 'United States', '78759', '+1 (312) 875-2344',  'hello.world@gmail.com', 5);
/*2.4*/

UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST SET NAME = 'ccr'
WHERE NAME = 'Creedence Clearwater Revival';
/*2.5*/
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
/*2.6*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 20;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('1/JUN/2003') AND TO_DATE('1/MAR/2004');
/*2.7*/
ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID)
REFERENCES INVOICE(INVOICEID)
ON DELETE CASCADE;
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID)
REFERENCES CUSTOMER(CUSTOMERID)
ON DELETE CASCADE;

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';




/*3.1*/

CREATE OR REPLACE FUNCTION getTime RETURN TIMESTAMP AS currTime TIMESTAMP;
BEGIN 
    RETURN SYSTIMESTAMP;
END;

SELECT getTime FROM DUAL;

CREATE OR REPLACE FUNCTION mediaLength(idx IN NUMBER) RETURN NUMBER as mLength NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO mLength FROM MEDIATYPE
    WHERE MEDIATYPEID = idx;
    RETURN mLength;
END;

select mediaLength(2) FROM DUAL;

/*3.2*/
CREATE OR REPLACE FUNCTION avgInvoice RETURN NUMBER AS avgInv NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO avgInv
    FROM INVOICE;
    RETURN avgInv;
END;

SELECT avgInvoice FROM DUAL;-

CREATE OR REPLACE FUNCTION maxInvoice RETURN NUMBER AS maxInv NUMBER;
BEGIN
    SELECT MAX(TOTAL) INTO maxInv
    FROM INVOICE;
    RETURN maxInv;
END;

SELECT maxInvoice FROM DUAL;

/*3.3*/
CREATE OR REPLACE FUNCTION avgInvoiceLine RETURN NUMBER AS avgInvLine NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO avgInvLine
    FROM INVOICELINE;
    RETURN avgInvLine;
END;

SELECT avgInvoiceLine FROM DUAL;

/* 3.4*/
CREATE OR REPLACE TYPE EMPOBJ AS OBJECT 
   ( EmployeeId NUMBER,
    LastName VARCHAR2(20),
    FirstName VARCHAR2(20)/*,
    Title VARCHAR2(30),
    ReportsTo NUMBER,
    BirthDate DATE,
    HireDate DATE,
    Address VARCHAR2(70),
    City VARCHAR2(40),
    State VARCHAR2(40),
    Country VARCHAR2(40),
    PostalCode VARCHAR2(10),
    Phone VARCHAR2(24),
    Fax VARCHAR2(24),
    Email VARCHAR2(60)*/
);
   
CREATE OR REPLACE TYPE EMPTBL IS TABLE OF EMPOBJ;

CREATE OR REPLACE FUNCTION oldEmployees RETURN EMPTBL AS oldEmpl EMPTBL;
BEGIN
    SELECT EMPOBJ(EmployeeId, LastName, FirstName) BULK COLLECT INTO oldEmpl FROM EMPLOYEE WHERE BIRTHDATE >= TO_DATE('01-JAN-1968');
    RETURN oldEmpl;
END;

SELECT * FROM table(oldEmployees());
/*4.1*/
CREATE OR REPLACE PROCEDURE firstAndLastName(fn OUT VARCHAR, ln OUT VARCHAR) AS
BEGIN
    SELECT FIRSTNAME, LASTNAME INTO fn, ln FROM EMPLOYEE;
END;
     

/*4.2*/
CREATE OR REPLACE PROCEDURE updateEmployee(empid IN INTEGER, ln IN VARCHAR2, fn IN VARCHAR2) AS
BEGIN
    UPDATE EMPLOYEE SET LASTNAME = ln, FIRSTNAME = fn WHERE EMPLOYEEID = empid;
    COMMIT;   
END;

SELECT * FROM EMPLOYEE;

BEGIN updateEmployee(9, 'Smith', 'John'); END;


CREATE OR REPLACE PROCEDURE getManagers(empid IN INTEGER, managerResult OUT EMPTBL) AS
BEGIN
    SELECT EMPOBJ(EmployeeId, LastName, FirstName) BULK COLLECT INTO managerResult FROM EMPLOYEE WHERE EMPLOYEEID =
    (SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = empid);
END;

/*4.3*/
CREATE OR REPLACE TYPE CUSTOBJ AS OBJECT 
   (FirstName VARCHAR2(40),
    LastName VARCHAR2(20),
    Company VARCHAR2(80)
);
   
CREATE OR REPLACE TYPE CUSTTBL IS TABLE OF CUSTOBJ;

CREATE OR REPLACE PROCEDURE customerCompany(cid NUMBER, ctable out CUSTTBL) as
BEGIN
    SELECT CUSTOBJ(FirstName, LastName, Company) BULK COLLECT INTO ctable FROM CUSTOMER WHERE CUSTOMERID = cid;
END;

/*5.0*/
CREATE OR REPLACE PROCEDURE delInvoice(IId in Number) AS
BEGIN
    DELETE FROM INVOICE WHERE INVOICEID = IId;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE basicNewCust(custId IN NUMBER, fName IN VARCHAR, lName IN VARCHAR, email IN VARCHAR) AS
BEGIN
    INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (custid, fName, lName, email);
    COMMIT;
END;

/*6.1*/
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN DBMS_OUTPUT.PUT_LINE('THIS FIRED AFTER EMPLOYEE INSERT');
END;
/

CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN DBMS_OUTPUT.PUT_LINE('THIS FIRED AFTER ALBUM UPDATE');
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN DBMS_OUTPUT.PUT_LINE('THIS FIRED AFTER CUSTOMER DELETE');
END;
/

/*7.1*/
SELECT FIRSTNAME, LASTNAME, INVOICEID FROM CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
/*7.2*/
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM CUSTOMER LEFT JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
/*7.3*/
SELECT NAME, TITLE FROM ALBUM RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;
/*7.4*/
SELECT * FROM ARTIST CROSS JOIN ALBUM ORDER BY ARTIST.NAME;
/*7.5*/
SELECT * FROM EMPLOYEE e1 LEFT JOIN EMPLOYEE e2 ON e1.REPORTSTO = e2.EMPLOYEEID;