-- Drop database if it exists
DROP USER ers CASCADE;

-- Create the database user
CREATE USER ers
IDENTIFIED BY password
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to ers;
GRANT resource to ers;
GRANT create session to ers;
GRANT CREATE TABLE TO ers;
GRANT CREATE view To ers;

-- conenct username/password
CONNECT ers/password;

-- create tables
CREATE TABLE ERS_USER(
	u_id NUMBER(*,0) PRIMARY KEY,
	u_username VARCHAR2(40) NOT NULL UNIQUE,
	u_password VARCHAR2(40) NOT NULL,
	u_firstname VARCHAR(40),
	u_lastname VARCHAR(40),
	u_email VARCHAR(100) UNIQUE,
	ur_id NUMBER(*,0) NOT NULL
);

CREATE TABLE ERS_USER_ROLE(
	ur_id NUMBER(*,0) PRIMARY KEY,
	ur_role VARCHAR2(40)
);

CREATE TABLE ERS_REIMBURSEMENT(
	r_id NUMBER(*,0) PRIMARY KEY,
	r_amount NUMBER(22,2) NOT NULL,
	r_description VARCHAR(100),
	r_receipt BLOB,
	r_submitted TIMESTAMP NOT NULL,
	r_resolved TIMESTAMP,
	u_id_author NUMBER(*,0) NOT NULL,
	u_id_resolver NUMBER(*,0),
	rt_type NUMBER(*,0) NOT NULL,
	rs_status NUMBER(*,0) NOT NULL
);

CREATE TABLE ERS_REIMBURSEMENT_STATUS(
	rs_id NUMBER(*,0) PRIMARY KEY,
	rs_status VARCHAR2(30) NOT NULL
);

CREATE TABLE ERS_REIMBURSEMENT_TYPE(
	rt_id NUMBER(*,0) PRIMARY KEY,
	rt_type VARCHAR2(30) NOT NULL
);

-- Constraints for foreign keys
ALTER TABLE ERS_USER ADD CONSTRAINT ur_id_fk FOREIGN KEY (ur_id)
    REFERENCES ERS_USER_ROLE (ur_id) ON DELETE CASCADE;

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT u_id_author_fk FOREIGN KEY (u_id_author)
    REFERENCES ERS_USER (u_id) ON DELETE CASCADE;
ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT u_id_resolver_fk FOREIGN KEY (u_id_resolver)
    REFERENCES ERS_USER (u_id) ON DELETE CASCADE;
ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT rt_type_fk FOREIGN KEY (rt_type)
    REFERENCES ERS_REIMBURSEMENT_TYPE (rt_id) ON DELETE CASCADE;
ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT rs_status_fk FOREIGN KEY (rs_status)
    REFERENCES ERS_REIMBURSEMENT_STATUS (rs_id) ON DELETE CASCADE;

-- sequences
CREATE SEQUENCE SQ_USER
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_REIMBURSEMENT
START WITH 1
INCREMENT BY 1;
/

-- triggers
CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON ERS_USER
FOR EACH ROW
BEGIN
    SELECT SQ_USER.NEXTVAL INTO :NEW.u_id FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_REIMBURSEMENT
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
    SELECT SQ_REIMBURSEMENT.NEXTVAL INTO :NEW.r_id FROM DUAL;
END;
/

--insert user roles, reimbursement types, and statuses
INSERT INTO ERS_USER_ROLE(ur_id,ur_role) VALUES(1,'EMPLOYEE');
INSERT INTO ERS_USER_ROLE(ur_id,ur_role) VALUES(2,'MANAGER');
INSERT INTO ERS_REIMBURSEMENT_STATUS(rs_id,rs_status) VALUES(1,'PENDING');
INSERT INTO ERS_REIMBURSEMENT_STATUS(rs_id,rs_status) VALUES(2,'DENIED');
INSERT INTO ERS_REIMBURSEMENT_STATUS(rs_id,rs_status) VALUES(3,'APPROVED');
INSERT INTO ERS_REIMBURSEMENT_TYPE(rt_id,rt_type) VALUES(1,'MEDICAL');
INSERT INTO ERS_REIMBURSEMENT_TYPE(rt_id,rt_type) VALUES(2,'TRAVEL');
INSERT INTO ERS_REIMBURSEMENT_TYPE(rt_id,rt_type) VALUES(3,'RELOCATION');
INSERT INTO ERS_REIMBURSEMENT_TYPE(rt_id,rt_type) VALUES(4,'CUMMUTING');
INSERT INTO ERS_REIMBURSEMENT_TYPE(rt_id,rt_type) VALUES(5,'TRAINING');
INSERT INTO ERS_REIMBURSEMENT_TYPE(rt_id,rt_type) VALUES(6,'SUPPLIES');