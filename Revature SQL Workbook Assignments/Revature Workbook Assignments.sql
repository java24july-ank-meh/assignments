/* Revature Workbook Assignments - Vincent Commero

/* 2.1 SELECT */
SELECT * FROM Employee;
SELECT * FROM Employee WHERE LASTNAME='King';
SELECT * FROM Employee WHERE FIRSTNAME='Andrew' AND REPORTSTO IS NULL;


/* 2.2 ORDER BY */
SELECT * FROM Album ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM Customer ORDER BY CITY ASC;


/* 2.3 INSERT INTO */
INSERT INTO Genre VALUES (26, 'Metalcore');
INSERT INTO Genre (GENREID, NAME) VALUES (27, 'Dub Step');

INSERT INTO Employee (EMPLOYEEID, FIRSTNAME, LASTNAME, COUNTRY)
VALUES (9, 'Vincent', 'Commero', 'USA');
INSERT INTO Employee (EMPLOYEEID, FIRSTNAME, LASTNAME, CITY, COUNTRY)
VALUES (10, 'Joe', 'Schmoe', 'Anytown', 'USA');

INSERT INTO Customer (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES (60, 'Jace', 'Beleren', 'jbelern@gatewatch.net');
INSERT INTO Customer (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES (61, 'Liliana', 'Vess', 'lvess@gatewatch.net');


/* 2.4 UPDATE */
UPDATE  Customer
SET FIRSTNAME='Robert', LASTNAME='Walter'
WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';

UPDATE Artist
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';


/* 2.5 LIKE */
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';


/* 2.6 BETWEEN */
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';


/* 2.7 DELETE */
ALTER TABLE INVOICE
    DROP CONSTRAINT FK_INVOICECUSTOMERID;
ALTER TABLE INVOICE
    ADD CONSTRAINT FK_INVOICECUSTOMERID FOREIGN KEY (CUSTOMERID)
        REFERENCES CUSTOMER(CUSTOMERID) ON DELETE CASCADE;
ALTER TABLE INVOICELINE
    DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE INVOICELINE
    ADD CONSTRAINT FK_INVOICELINEINVOICEID FOREIGN KEY (INVOICEID)
        REFERENCES INVOICE(INVOICEID) ON DELETE CASCADE;
DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';


/* 3.1 System Defined Functions */
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME  RETURN TIMESTAMP AS Z TIMESTAMP;
BEGIN
    Z := CURRENT_TIMESTAMP;
    RETURN Z;
END;
/

DECLARE CURR_TIME TIMESTAMP;
BEGIN
    CURR_TIME := GET_CURRENT_TIME();
    DBMS_OUTPUT.PUT_LINE('CURRENT TIME: '||CURR_TIME);
END;
/


CREATE OR REPLACE FUNCTION GET_MT_LENGTH (X IN NUMBER) RETURN NUMBER AS Z NUMBER;
BEGIN 
    SELECT LENGTH(NAME) INTO Z FROM MEDIATYPE WHERE MEDIATYPEID = X;
    RETURN Z;
END;
/

DECLARE MT_LEN NUMBER;
BEGIN
    MT_LEN := GET_MT_LENGTH(2);
    DBMS_OUTPUT.PUT_LINE('MEDIATYPE LENGTH: '||MT_LEN);
END;
/


/* 3.2 System Defined Aggregate Functions */
CREATE OR REPLACE FUNCTION GET_AVG_INVOICE RETURN NUMBER AS Z NUMBER;
BEGIN 
    SELECT AVG(TOTAL) INTO Z FROM INVOICE;
    RETURN Z;
END;
/

DECLARE INV_AVG NUMBER;
BEGIN
    INV_AVG := GET_AVG_INVOICE;
    DBMS_OUTPUT.PUT_LINE('INVOICE AVERAGE: '||INV_AVG);
END;
/


CREATE OR REPLACE FUNCTION GET_MOST_EXPENSIVE_TRACK RETURN VARCHAR2 AS TRK VARCHAR2(200);
BEGIN
    SELECT NAME INTO TRK FROM TRACK WHERE ROWNUM=1 ORDER BY UNITPRICE DESC;
    RETURN TRK;
END;
/

DECLARE TRK_NAME VARCHAR2(200);
BEGIN
    TRK_NAME := GET_MOST_EXPENSIVE_TRACK;
    DBMS_OUTPUT.PUT_LINE('MOST EXPENSIVE TRACK: '||TRK_NAME);
END;
/


/* 3.3 User Defined Functions */
CREATE OR REPLACE FUNCTION AVG_PRICE_INVOICELINE RETURN NUMBER AS AV NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AV FROM INVOICELINE;
    RETURN AV;
END;
/

DECLARE AVG_PRICE NUMBER;
BEGIN
    AVG_PRICE := AVG_PRICE_INVOICELINE;
    DBMS_OUTPUT.PUT_LINE('AVG PRICE OF INVOICELINE ITEMS: '||AVG_PRICE);
END;
/


/* 3.4 User Defined Table Valued Functions */
/* I just can't seem to figure this one out. */
CREATE OR REPLACE TYPE EMPLOYEES_ROW AS 
    OBJECT(EMPLOYEEID NUMBER, 
            FIRSTNAME VARCHAR2(20),
            LASTNAME VARCHAR2(20),
            TITLE VARCHAR2(30),
            REPORTSTO NUMBER,
            BIRTHDATE DATE,
            HIREDATE DATE,
            ADDRESS VARCHAR2(70),
            CITY VARCHAR2(40),
            STATE VARCHAR2(40),
            COUNTRY VARCHAR2(40),
            POSTALCODE VARCHAR2(10),
            PHONE VARCHAR2(24),
            FAX VARCHAR2(24),
            EMAIL VARCHAR2(60));

CREATE OR REPLACE TYPE EMPLOYEES_1968 AS TABLE OF EMPLOYEES_ROW;

CREATE OR REPLACE FUNCTION EMPLOYEES_BORN_AFTER_1968 
RETURN EMPLOYEES_1968
IS
BEGIN
    DECLARE rw EMPLOYEES_ROW;
    CURSOR young_employees_crsr IS 
        SELECT EMPLOYEEID,
                FIRSTNAME,
                LASTNAME,
                TITLE,
                REPORTSTO,
                BIRTHDATE,
                HIREDATE,
                ADDRESS,
                CITY,
                STATE,
                COUNTRY,
                POSTALCODE,
                PHONE,
                FAX,
                EMAIL
            FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-1968';
            
    DECLARE tb EMPLOYEES_1968;
    OPEN young_employees_crsr;
        FETCH young_employees_crsr INTO rw;
    CLOSE young_employees_crsr;
    RETURN tb;
END;
/

/* 4.1 Basic Stored Procedure */
CREATE OR REPLACE PROCEDURE FIRST_AND_LAST_NAME_EMPLOYEES (S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR
        SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

/* 4.2 Stored Procedure Input Parameters */
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE
    (EMPID IN NUMBER, 
    NEW_FIRSTNAME IN VARCHAR2,
    NEW_LASTNAME IN VARCHAR2,
    NEW_TITLE IN VARCHAR2,
    NEW_REPORTSTO IN NUMBER,
    NEW_BIRTHDATE IN DATE,
    NEW_HIREDATE IN DATE,
    NEW_ADDRESS IN VARCHAR2,
    NEW_CITY IN VARCHAR2,
    NEW_STATE IN VARCHAR2,
    NEW_COUNTRY IN VARCHAR2,
    NEW_POSTALCODE IN VARCHAR2,
    NEW_PHONE IN VARCHAR2,
    NEW_FAX IN VARCHAR2,
    NEW_EMAIL IN VARCHAR2)
AS
BEGIN
    UPDATE EMPLOYEE
    SET FIRSTNAME=NEW_FIRSTNAME,
        LASTNAME=NEW_LASTNAME,
        TITLE=NEW_TITLE,
        REPORTSTO=NEW_REPORTSTO,
        BIRTHDATE=NEW_BIRTHDATE,
        HIREDATE=NEW_HIREDATE,
        ADDRESS=NEW_ADDRESS,
        CITY=NEW_CITY,
        STATE=NEW_STATE,
        COUNTRY=NEW_COUNTRY,
        POSTALCODE=NEW_POSTALCODE,
        PHONE=NEW_PHONE,
        FAX=NEW_FAX,
        EMAIL=NEW_EMAIL
    WHERE EMPLOYEEID=EMPID;
    COMMIT;
    EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('FAILED');
    ROLLBACK;
    
END;
/

CREATE OR REPLACE PROCEDURE EMPLOYEE_MANAGERS(EMPID IN INTEGER, S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR
        SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID=EMPID;
END;
/


/* 4.3 Stored Procedure Output Parameters  */
CREATE OR REPLACE PROCEDURE CSTMR_NAME_COMPANY
(input_id IN NUMBER,
ret_fname OUT VARCHAR2, ret_lname OUT VARCHAR2, ret_compny OUT VARCHAR2)
AS
BEGIN
    SELECT FIRSTNAME INTO ret_fname FROM CUSTOMER WHERE CUSTOMERID = input_id;
    SELECT LASTNAME INTO ret_fname FROM CUSTOMER WHERE CUSTOMERID = input_id;
    SELECT COMPANY INTO ret_fname FROM CUSTOMER WHERE CUSTOMERID = input_id;
END;
/

/* 5.0 Transactions  */
CREATE OR REPLACE PROCEDURE DELETE_FROM_INVOICE (invoice_id IN NUMBER)
AS
BEGIN
    SAVEPOINT SP_DELETE_FROM_INVOICE;
    DELETE FROM INVOICE WHERE INVOICEID = invoice_id;
    COMMIT;
END;
/

CALL DELETE_FROM_INVOICE (218);

CREATE OR REPLACE PROCEDURE NEW_CUSTOMER (
    cst_id IN NUMBER,
    cst_fname IN VARCHAR2,
    cst_lname IN VARCHAR2,
    cst_cmpny IN VARCHAR2,
    cst_addr IN VARCHAR2,
    cst_city IN VARCHAR2,
    cst_state IN VARCHAR2,
    cst_ctry IN VARCHAR2,
    cst_postcode IN VARCHAR2,
    cst_phone IN VARCHAR2,
    cst_fax IN VARCHAR2,
    cst_email IN VARCHAR2,
    cst_supportrep IN NUMBER)
AS
BEGIN
    SAVEPOINT SP_NEW_CUSTOMER;
    INSERT INTO CUSTOMER VALUES
        (cst_id,
        cst_fname,
        cst_lname,
        cst_cmpny,
        cst_addr,
        cst_city,
        cst_state,
        cst_ctry,
        cst_postcode,
        cst_phone,
        cst_fax,
        cst_email,
        cst_supportrep);
    COMMIT;
END;
/

CALL NEW_CUSTOMER (111, 'Joe', 'Schmoe', 'Schmoe, Inc', '123 Nowhere Dr',
    'Anytown', 'VA', 'USA', '99999', '867-5309','123-4567','jschmoe@gmail.com',
    3);
    
    
/*6.1 AFTER/FOR TRIGGERS */
/* begin trigger log setup */
CREATE TABLE TRIGGER_LOG (
    TRIGGERID NUMBER(38) PRIMARY KEY,
    TRIGGERTYPE VARCHAR2(1000)
);
CREATE SEQUENCE SQ_TRIGGER_LOG_ID
MINVALUE 1
MAXVALUE 10000
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_INSERT_TRIGGER_LOG
BEFORE INSERT ON TRIGGER_LOG
FOR EACH ROW
BEGIN
    SELECT SQ_TRIGGER_LOG.NEXTVAL INTO :NEW.TRIGGERID FROM DUAL;
END;
/
/* end trigger log setup */

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE_AFTER
AFTER INSERT ON EMPLOYEE
BEGIN
    INSERT INTO TRIGGER_LOG (TRIGGERTYPE) VALUES ('TR_INSERT_EMPLOYEE_AFTER');
END;
/

CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM_AFTER
AFTER UPDATE ON ALBUM
BEGIN
    INSERT INTO TRIGGER_LOG (TRIGGERTYPE) VALUES ('TR_UPDATE_ALBUM_AFTER');
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER_AFTER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    INSERT INTO TRIGGER_LOG (TRIGGERTYPE) VALUES ('TR_DELETE_CUSTOMER_AFTER');
END;
/

DELETE FROM CUSTOMER WHERE CUSTOMERID = 111;

/* 7.1 INNER JOIN */
SELECT CST.FIRSTNAME, CST.LASTNAME, INV.INVOICEID
FROM CUSTOMER CST INNER JOIN INVOICE INV ON INV.CUSTOMERID = CST.CUSTOMERID;

/* 7.2 OUTER  */
SELECT CST.CUSTOMERID, CST.FIRSTNAME, CST.LASTNAME, INV.INVOICEID, INV.TOTAL
FROM CUSTOMER CST LEFT JOIN INVOICE INV ON INV.CUSTOMERID = CST.CUSTOMERID;

/* 7.3 RIGHT */
SELECT ART.NAME, ALB.TITLE
FROM ALBUM ALB RIGHT JOIN ARTIST ART ON ART.ARTISTID = ALB.ARTISTID;

/* 7.4 CROSS */
SELECT * FROM ALBUM ALB CROSS JOIN ARTIST ART
ORDER BY ART.NAME ASC;

/* 7.5 SELF JOIN */
SELECT * FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.REPORTSTO = E2.REPORTSTO;

/* 7.6 Complicated Join assignment */
/* I organized the joins in a sort of "depth-first" traversal from INVOICELINE 
(with some minor deviations to make sure every table was reached) */
SELECT * FROM INVOICELINE INVL
INNER JOIN INVOICE INV ON INVL.INVOICEID = INV.INVOICEID
INNER JOIN CUSTOMER CST ON INV.CUSTOMERID = CST.CUSTOMERID
INNER JOIN EMPLOYEE EMP ON  CST.SUPPORTREPID = EMP.EMPLOYEEID
INNER JOIN TRACK TRK ON INVL.TRACKID = TRK.TRACKID
INNER JOIN PLAYLISTTRACK PLT ON PLT.TRACKID = TRK.TRACKID
INNER JOIN PLAYLIST PL ON PLT.PLAYLISTID = PL.PLAYLISTID
INNER JOIN MEDIATYPE MT ON TRK.MEDIATYPEID = MT.MEDIATYPEID
INNER JOIN ALBUM ALB ON TRK.ALBUMID = ALB.ALBUMID
INNER JOIN ARTIST ART ON ALB.ARTISTID = ART.ARTISTID
INNER JOIN GENRE GEN ON TRK.GENREID = GEN.GENREID;