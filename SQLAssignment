/*ASSIGNMENT*/
/*2.1*/
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO = NULL;
/*2.2*/
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;
/*2.3*/
SELECT * FROM GENRE;
INSERT INTO GENRE VALUES (26, 'Death Metal');
INSERT INTO GENRE VALUES (27, 'Folk');

SELECT * FROM EMPLOYEE;
INSERT INTO EMPLOYEE VALUES (9, 'Jackson', 'Demaree', 'El Presidente',9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '307 dulles greene', 'reston','va','usa','string','string','string','string');
INSERT INTO EMPLOYEE VALUES (10, 'Why', 'Is', 'This',7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'So', 'Long',',','I','cant','stand','it','!');

SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER VALUES (60, 'BOB', 'BOBERSTON','Revature','address','reston','va','usa', '435534', '1241241', '12412,', 'ymail',8);
INSERT INTO CUSTOMER VALUES (61, 'ROB', 'ROBERSTON','Revature','address','reston','va','usa', '435534', '1241241', '12412,', 'ymail',8);

/*2.4*/
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

/*2.5*/
SELECT BILLINGADDRESS FROM INVOICE;
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/*2.6*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

/*2.7*/

ALTER TABLE INVOICELINE DISABLE CONSTRAINT FK_INVOICELINEINVOICEID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/*3.1*/
CREATE OR REPLACE FUNCTION CUR_DATE RETURN DATE IS DATE_TODAY DATE;
BEGIN
    DATE_TODAY:=CURRENT_TIMESTAMP;
    RETURN DATE_TODAY;
END;
/

DECLARE TODAY DATE;
BEGIN
    TODAY := CUR_DATE;
    DBMS_OUTPUT.PUT_LINE('TODAY: '||TODAY);
END;
/

/*work*/
CREATE OR REPLACE FUNCTION MEDIATYPE_LENGTH () RETURN NUMBER IS LEN NUMBER;
BEGIN
    
END;


/*3.2*/
CREATE OR REPLACE FUNCTION TOTAL RETURN NUMBER IS NUM1 NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO NUM1 FROM INVOICE;
    RETURN NUM1;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('TOTAL: '||TOTAL);
END;
/

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK RETURN NUMBER IS NUM1 NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO NUM1 FROM TRACK;
    RETURN NUM1;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('MOST EXPENSIVE TRACK: '||MOST_EXPENSIVE_TRACK);
END;

/*3.3*/
CREATE OR REPLACE FUNCTION AVERAGE_PRICE_ITEMS RETURN NUMBER IS NUM1 NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO NUM1 FROM INVOICELINE;
    RETURN NUM1;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('AVERAGE PRICE ITEMS: '||AVERAGE_PRICE_ITEMS);
END;

/*3.4*/
/*NEEDS work create new object*/
CREATE TYPE empno_tbl 
    IS TABLE OF NUMBER;

CREATE OR REPLACE FUNCTION get_empnos
  RETURN empno_tbl
IS
  l_empnos empno_tbl;
BEGIN
  SELECT empno
    BULK COLLECT INTO l_empnos
    FROM emp;
  RETURN l_empnos;
END;
CREATE TYPE EMPLOYEE_TABLE IS TABLE OF VARCHAR2(200);
CREATE OR REPLACE FUNCTION EMPLOYEES_BORN_AFTER_1968 RETURN EMPLOYEE_TABLE IS E_TABLE EMPLOYEE_TABLE;
BEGIN
    SELECT FIRSTNAME, LASTNAME BULK COLLECT INTO E_TABLE FROM EMPLOYEE WHERE BIRTHDATE > '01-JAN-68';
    RETURN E_TABLE;
END;
/

/*4.1*/

CREATE OR REPLACE PROCEDURE GET_ALL_NAMES (S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
    S SYS_REFCURSOR;
    SOME_FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_ALL_NAMES(S);
    
    LOOP
        FETCH S INTO SOME_FIRSTNAME, SOME_LASTNAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(SOME_FIRSTNAME||' IS CURRENT FIRSTNAME, '||SOME_LASTNAME||' IS CURRENT LASTNAME');
    END LOOP;
    CLOSE S;
END;
/

/*4.2*/
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_TITLE (NEW_TITLE VARCHAR2, FNAME VARCHAR2, LNAME VARCHAR2) AS
BEGIN
    UPDATE EMPLOYEE SET TITLE = NEW_TITLE WHERE FIRSTNAME = FNAME AND LASTNAME = LNAME;
    COMMIT;
END;
/

SELECT * FROM EMPLOYEE;
BEGIN
    UPDATE_EMPLOYEE_TITLE('EMPEROR','Jackson','Demaree');
END;


CREATE OR REPLACE PROCEDURE SELECT_MANAGERS(S OUT SYS_REFCURSOR,EMPLOYEE VARCHAR2, EID NUMBER)
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE WHERE EMPLOYEEID = (SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = EID);
END;
/

CREATE OR REPLACE PROCEDURE CUSTOMER_NAME_AND_COMPANY(S OUT SYS_REFCURSOR,CUST_ID NUMBER) IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER WHERE CUSTOMERID = CUST_ID;
END;
/

/*5.1*/
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVOICE_ID NUMBER) IS
BEGIN
    DELETE FROM INVOICE WHERE INVOICEID = INVOICE_ID;
END;
/

ALTER TABLE INVOICELINE DISABLE CONSTRAINT FK_INVOICELINEINVOICEID;

SELECT * FROM INVOICE;
BEGIN
    DELETE_INVOICE(320);
END;
/

/*work*/
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(CUSTOMERID2 NUMBER,FIRSTNAME2 VARCHAR2,
LASTNAME2 VARCHAR2, COMPANY2 VARCHAR2, ADDRESS VARCHAR2, CITY2 VARCHAR2,
STATE2 VARCHAR2, COUNTRY2 VARCHAR2, POSTALCODE2 VARCHAR2, PHONE2 VARCHAR2,
FAX2 VARCHAR2, EMAIL2 VARCHAR2, SUPPORTREPID2 NUMBER) IS
BEGIN
    INSERT INTO CUSTOMER VALUES (CUSTOMERID2,
FIRSTNAME2,
LASTNAME2,
COMPANY2,
ADDRESS2,
CITY2,
STATE2,
COUNTRY2,
POSTALCODE2,
PHONE2,
FAX2,
EMAIL2,
SUPPORTREPID2);
END;
/

/*6.1*/

/*7.1*/
/*inner join*/
SELECT FIRSTNAME, LASTNAME, INVOICEID FROM CUSTOMER
INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

/*7.2outer join*/
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM
CUSTOMER LEFT JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/*7.3 right*/
SELECT TITLE, NAME FROM ALBUM RIGHT JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID;

/*7.4 CROSS*/
SELECT * FROM ARTIST CROSS JOIN ALBUM ORDER BY NAME ASC;

/*7.5 SELF*/
SELECT A.FIRSTNAME AS EMPLOYEE1, B.FIRSTNAME AS EMPLOYEE2, A.REPORTSTO FROM
EMPLOYEE A, EMPLOYEE B
WHERE A.FIRSTNAME <> B.FIRSTNAME
AND A.REPORTSTO = B.REPORTSTO ORDER BY A.REPORTSTO;

/*7.6*/
SELECT * FROM ALBUM
INNER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID
    INNER JOIN TRACK ON ALBUM.ALBUMID = TRACK.ALBUMID
    INNER JOIN GENRE ON TRACK.GENREID = GENRE.GENREID
    INNER JOIN MEDIATYPE ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
    INNER JOIN PLAYLISTTRACK ON PLAYLISTTRACK.TRACKID = TRACK.TRACKID
    INNER JOIN PLAYLIST ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
    INNER JOIN INVOICELINE ON INVOICELINE.TRACKID = TRACK.TRACKID
    INNER JOIN INVOICE ON INVOICE.INVOICEID = INVOICELINE.INVOICEID
    INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
    
/*9.0 backup*/
BACKUP DATABASE chinook TO DISK='C:\chinook.bak';
