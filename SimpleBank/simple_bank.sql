/*Drop database if it exists*/
DROP USER simplebank CASCADE;

/*Create the database user*/
CREATE USER simplebank
IDENTIFIED BY simplebank
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to simplebank;
GRANT resource to simplebank;
GRANT create session to simplebank;
GRANT CREATE TABLE TO simplebank;
GRANT CREATE view To simplebank;

/*Connect as new user, otherwise will use current user*/
CONNECT simplebank/simplebank;

/*Create tables*/
CREATE TABLE ACCOUNT (
    ACCOUNT_ID INTEGER PRIMARY KEY,
    ACCOUNT_NUMBER INTEGER UNIQUE,
    LASTNAME VARCHAR2(30) NOT NULL,
    FIRSTNAME VARCHAR2(30) NOT NULL,
    ACCOUNT_BALANCE INTEGER DEFAULT 0
);

CREATE TABLE LOGIN(
    ACCOUNT_ID INTEGER,
    USERNAME VARCHAR2 (30) UNIQUE,
    USER_PASSWORD VARCHAR2(30)
);

CREATE TABLE TRANSACTION (
    T_ID INTEGER PRIMARY KEY,
    ACCOUNT_NUMBER INTEGER ,
    T_TYPE VARCHAR2(8),
    T_AMOUNT INT
);

/*Create foreign keys*/
ALTER TABLE TRANSACTION ADD CONSTRAINT FK_ACCOUNT_NUMBER FOREIGN KEY (ACCOUNT_NUMBER)
    REFERENCES ACCOUNT (ACCOUNT_NUMBER) ON DELETE CASCADE;

ALTER TABLE LOGIN ADD CONSTRAINT FK_ACCOUNT_ID FOREIGN KEY (ACCOUNT_ID) 
    REFERENCES ACCOUNT(ACCOUNT_ID) ON DELETE CASCADE;

    
/*Create sequences*/
CREATE SEQUENCE SQ_PK_ACCOUNT_ID
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_PK_TRANSACTION_ID
START WITH 1
INCREMENT BY 1;
/

/*Triggers*/
CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_PK_ACCOUNT_ID.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_TRANSACTION
BEFORE INSERT ON TRANSACTION
FOR EACH ROW
BEGIN
    SELECT SQ_PK_TRANSACTION_ID.NEXTVAL INTO :NEW.T_ID FROM DUAL;
END;
/

/*Stored Procedure*/
CREATE OR REPLACE PROCEDURE SP_DEPOSIT 
    (A_ID IN NUMBER, A_NUMBER IN NUMBER, AMT IN NUMBER) AS
BEGIN
    UPDATE ACCOUNT SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + AMT
        WHERE ACCOUNT_ID = A_ID AND ACCOUNT_NUMBER=A_NUMBER;
    INSERT INTO TRANSACTION(ACCOUNT_NUMBER,T_TYPE,T_AMOUNT) VALUES(A_NUMBER,'DEPOSIT',AMT);
    COMMIT;
END;
/

/*not working*/
CREATE OR REPLACE PROCEDURE SP_WITHDRAW 
    (A_ID IN NUMBER, A_NUMBER IN NUMBER, AMT IN NUMBER) AS
BEGIN
        SELECT ACCOUNT_BALANCE INTO curr_bal FROM ACCOUNT WHERE ACCOUNT_ID=A_ID;
        IF curr_bal <AMT THEN
        ELSE UPDATE ACCOUNT SET ACCOUNT_BALANCE = BALNCE - AMT
                WHERE ACCOUNT_ID = A_ID AND ACCOUNT_NUMBER=A_NUMBER;
        INSERT INTO TRANSACTION(ACCOUNT_NUMBER,T_TYPE,T_AMOUNT) VALUES(A_NUMBER,'WITHDRAW',AMT);
    END IF;
    COMMIT;
END;
/
/*
EXECUTE SP_DEPOSIT(2,4873294,100);

INSERT INTO ACCOUNT(ACCOUNT_NUMBER,LASTNAME,FIRSTNAME,ACCOUNT_BALANCE) VALUES(2131,'Buffalo','Bill',0);