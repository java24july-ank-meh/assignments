/*2.1*/
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME='King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO is NULL;

/*2.2 ORDER BY */
SELECT * FROM ALBUM ORDER BY TITLE;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY DESC;

/*2.3 INSERT INTO */

INSERT INTO GENRE (GENREID, NAME) VALUES(26, 'Progressive') ;
INSERT INTO GENRE (GENREID, NAME) VALUES(27, 'Regional Mexican') ;

INSERT INTO EMPLOYEE ( EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
  VALUES (9, 'Hernandez', 'Huriel', 'Developer', null, '03-APR-91', '08-AUG-17', '941 N. Sugar Rd', 'Edinburg', 'TX', 'USA', 78557, '+1 (956) 313-3128', null, 'huriel.hdz@gmail.com');
INSERT INTO EMPLOYEE ( EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
  VALUES (10, 'Doe', 'Jone', 'Developer', null, '03-APR-92', '01-AUG-17', '941 N. 10th', 'McAllen', 'TX', 'USA', 78541, '+1 (956) 123-1234', null, 'john.doe@mail.com');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID) 
  VALUES ( 60, 'JANE', 'DOE', 'Revature', 'address', 'Reston', 'VA', 'USA', null, null,null,  'jane.do@mail.com', 5);
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID) 
  VALUES ( 61, 'Jerry', 'Dae', 'Revature', 'address', 'Reston', 'VA', 'USA', null, null,null,  'gerry.do@mail.com', 5);

/* Update */
UPDATE CUSTOMER SET FIRSTNAME='ROBERT', LASTNAME='WALTER' WHERE FIRSTNAME='Aaron'AND LASTNAME='Mitchell';

UPDATE ARTIST SET NAME='CCR' where NAME='Creedence Clearwater Revival';

/* LIKE */
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'Ta%';

/* BETWEEN */
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';

/* DELETE */
DELETE FROM CUSTOMER WHERE FIRSTNAME='ROBERT' AND LASTNAME='WALTER'  ;


/* Functions */
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN TIMESTAMP AS X TIMESTAMP;
BEGIN
   SELECT LOCALTIMESTAMP INTO X FROM DUAL;
   RETURN X;
END;
/

DECLARE
  c TIMESTAMP;
BEGIN
   c:= GET_CURRENT_TIME;
   dbms_output.put_line('Current Time : ' || c);
END;
/

CREATE OR REPLACE FUNCTION GET_MEDIATYPE_SIZE
RETURN number is x NUMBER;
BEGIN
   SELECT COUNT (*) INTO X FROM MEDIATYPE;
   RETURN X;
END;
/

DECLARE
  c number(2);
BEGIN
   c:= GET_MEDIATYPE_SIZE();
   dbms_output.put_line('Media Type size : ' || c);
END;
/

/* 3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS */
CREATE OR REPLACE FUNCTION TotalInvoices
RETURN NUMBER AS total NUMBER;
BEGIN
  SELECT COUNT(*) INTO total FROM INVOICE;
  RETURN total;
END;
/

DECLARE
  invoices number(4);
BEGIN
  invoices:= TotalInvoices();
  dbms_output.put_line('Total number of invoices :' || invoices );
END;


CREATE OR REPLACE FUNCTION expensiveTrack
RETURN VARCHAR2 AS expensive VARCHAR2(2000);
BEGIN
    SELECT * INTO expensive  FROM ( SELECT NAME FROM TRACK ORDER BY UNITPRICE DESC) WHERE ROWNUM=1 ;
    RETURN expensive;
END;
/

DECLARE 
  expensive VARCHAR2(2000);
  BEGIN
    expensive:=expensiveTrack();
    dbms_output.put_line('Most expensive: '||expensive);
  END;
/


/* 3.3 USER DEFINED FUNCTION */
CREATE OR REPLACE FUNCTION avgInvoicePrice
RETURN NUMBER AS average NUMBER;
BEGIN
  SELECT AVG(UNITPRICE) INTO average FROM INVOICELINE;
  return average;
END;
/

DECLARE
  averagePrice NUMBER;
BEGIN
  averagePrice:= avgInvoicePrice();
  dbms_output.put_line('Average Invoic price:'||averagePrice);
END;
/
/* 3.4 USER DEFINED TABLE VALUED FUNCTIONS */
CREATE OR REPLACE FUNCTION employeeAfter1968
  RETURN EMPLOYEE%ROWTYPE
  IS
  CURSOR c_employee
  IS
  SELECT * FROM EMPLOYEE WHERE BIRTHDATE > '25-DEC-1968';
  
  r_employees c_employee%ROWTYPE;
  
  BEGIN
    dbms_output.put_line('execute get_employee');
    
    OPEN c_employee;
    FETCH c_employee INTO r_employees;
    CLOSE c_employee;
    
    RETURN r_employees;
  END;
/
select employeeAfter1968() from dual;
  

/* 4.1  PROCEDURE */
CREATE OR REPLACE PROCEDURE allEmployees( p_employee OUT SYS_REFCURSOR )
AS
BEGIN
  OPEN  p_employee FOR 
  SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

var p_cursor refcursor;
execute allemployees(:p_cursor);
print p_cursor;


/* 4.2 */
SELECT * FROM EMPLOYEE e INNER JOIN EMPLOYEE m ON e.REPORTSTO = m.EMPLOYEEID;


/* 4.3 */
SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER;



/* 7.1 */
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, i.INVOICEID FROM INVOICE i INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = i.CUSTOMERID;


SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL FROM CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;


SELECT ALBUM.TITLE, ARTIST.NAME FROM ALBUM RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID ORDER BY ARTIST.NAME;

/* 7.4 */
SELECT * FROM ALBUM CROSS JOIN ARTIST ORDER BY ARTIST.NAME;

/* 7.5*/
SELECT * FROM EMPLOYEE e , EMPLOYEE r where e.REPORTSTO = r.EMPLOYEEID;

/*7.6 */
SELECT * FROM ALBUM INNER JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID 
  INNER JOIN TRACK ON ALBUM.ALBUMID = TRACK.ALBUMID 
  INNER JOIN GENRE ON TRACK.GENREID = GENRE.GENREID
  INNER JOIN MEDIATYPE ON TRACK.MEDIATYPEID = MEDIATYPE.MEDIATYPEID
  INNER JOIN PLAYLISTTRACK ON PLAYLISTTRACK.TRACKID = TRACK.TRACKID
  INNER JOIN PLAYLIST ON PLAYLISTTRACK.PLAYLISTID = PLAYLIST.PLAYLISTID;


/* 9.0 */
