/*Drop database if it exists*/
DROP USER revbankadmin CASCADE;



/*Create the admin database user*/
CREATE USER revbankadmin /* Not really an admin, just allows a client to connect to the database */
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to revbankadmin;
GRANT resource to revbankadmin;
GRANT create session to revbankadmin;
GRANT CREATE TABLE TO revbankadmin;
GRANT CREATE view To revbankadmin;




/*Connect as revbankadmin */
CONNECT revbankadmin/p4ssw0rd;





/* Create tables */
CREATE TABLE REVBANK_USERS (
    USERID NUMBER PRIMARY KEY,
    USERNAME VARCHAR2(30) UNIQUE,
    PASSWORD VARCHAR2(30) NOT NULL,
    LOGGEDIN NUMBER(1)
);

CREATE TABLE REVBANK_ACCOUNTS (
    ACCOUNT_NUM NUMBER PRIMARY KEY,
    USERID NUMBER,
    BALANCE NUMBER,
    FOREIGN KEY (USERID) REFERENCES REVBANK_USERS(USERID)
        ON DELETE CASCADE
);

CREATE TABLE REVBANK_ADMIN (
    USERID NUMBER,
    USERNAME VARCHAR2(20),
    PASSWORD VARCHAR2(20),
    ADMINCODE VARCHAR2(20),
    LOGGEDIN NUMBER(1)
);
    




/* Create sequences */
CREATE SEQUENCE SQ_ACCOUNT_NUM_GEN
START WITH 100000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_USERID_GEN
MINVALUE 0
START WITH 0
INCREMENT BY 1;
/





/*Create triggers*/
CREATE OR REPLACE TRIGGER TR_INSERT_REVBANK_ACCOUNTS
BEFORE INSERT ON REVBANK_ACCOUNTS
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_NUM_GEN.NEXTVAL INTO :NEW.ACCOUNT_NUM FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_REVBANK_USERS
BEFORE INSERT ON REVBANK_USERS
FOR EACH ROW
BEGIN
    SELECT SQ_USERID_GEN.NEXTVAL INTO :NEW.USERID FROM DUAL;
    SELECT 0 INTO :NEW.LOGGEDIN FROM DUAL;
END;
/





/* Insert admin account */
INSERT INTO REVBANK_ADMIN (USERNAME, PASSWORD, ADMINCODE, LOGGEDIN) 
VALUES ('revbankadmin', 'p4ssw0rd', 'abcedf1234', 0);

INSERT INTO REVBANK_USERS (USERNAME, PASSWORD, LOGGEDIN) 
VALUES ('testaccount', 'pass123', 0);





/* Create procedures */
CREATE OR REPLACE PROCEDURE ACCOUNT_LOGIN
    (acc_user IN VARCHAR2, acc_password IN VARCHAR2, status OUT NUMBER) AS
check_pass VARCHAR2(20);
BEGIN
    SELECT PASSWORD INTO check_pass FROM REVBANK_USERS WHERE
                        USERNAME = acc_user;
    IF acc_password = check_pass THEN
        UPDATE REVBANK_USERS
        SET LOGGEDIN = 1
        WHERE USERNAME = acc_user;
        status := 1;
        COMMIT;
    ELSE
        status := 0;
    END IF;
EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('FAILED');
    ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE ACCOUNT_LOGOUT
    (acc_user IN VARCHAR2, acc_password IN VARCHAR2, status OUT NUMBER) AS
check_pass VARCHAR2(20);
BEGIN
    SELECT PASSWORD INTO check_pass FROM REVBANK_USERS WHERE
                        REVBANK_USERS.USERNAME = acc_user;
    IF (acc_password = check_pass) THEN
        UPDATE REVBANK_USERS
        SET LOGGEDIN = 0 
        WHERE USERNAME = acc_user;
        status := 1;
        COMMIT;
    ELSE
        status := 0;
    END IF;
EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('FAILED');
    ROLLBACK;
END;
/


CREATE OR REPLACE PROCEDURE CREATE_NEW_USER
    (NEWUSER IN VARCHAR2, NEWPASSWORD IN VARCHAR2, ADMINCODE IN VARCHAR2, STATUS OUT NUMBER) AS
check_code VARCHAR2(20);
BEGIN
    SELECT ADMINCODE INTO check_code FROM REVBANK_ADMIN;
   IF (ADMINCODE = check_code) THEN
    INSERT INTO REVBANK_USERS (USERNAME, PASSWORD) VALUES (NEWUSER, NEWPASSWORD);
    COMMIT;
    STATUS := 1;
   ELSE
    STATUS := 0;
   END IF;
EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('FAILED');
    ROLLBACK;
END CREATE_NEW_USER;
/

CREATE OR REPLACE PROCEDURE CREATE_NEW_ACCOUNT
    (ACCOWNER IN VARCHAR2, PASSWORD IN VARCHAR2, STATUS OUT NUMBER) AS
check_pass VARCHAR2(30);
acc_owner_id NUMBER;
BEGIN
    SELECT PASSWORD INTO check_pass FROM REVBANK_USERS USRS 
                WHERE USRS.USERNAME = ACCOWNER;
    SELECT USERID INTO acc_owner_id FROM REVBANK_ACCOUNTS RA
                WHERE RA.USERID = (SELECT RU.USERID FROM REVBANK_USERS RU
                                    WHERE RU.USERNAME = ACCOWNER);
        
    IF (PASSWORD = check_pass) THEN
        INSERT INTO REVBANK_ACCOUNTS (USERID, BALANCE)
            VALUES (acc_owner_id, 0.00);
        STATUS := 1;
    ELSE
        STATUS := 0;
    END IF;
END CREATE_NEW_ACCOUNT;
/

CREATE OR REPLACE PROCEDURE RETRIEVE_BALANCE 
(acc_num IN NUMBER, password IN VARCHAR2, balance_num OUT NUMBER, status OUT NUMBER) AS
check_pass VARCHAR2(30);
BEGIN
    SELECT USRS.PASSWORD INTO check_pass FROM REVBANK_USERS USRS WHERE
            USRS.USERNAME = (SELECT USERNAME FROM REVBANK_ACCOUNTS WHERE
                                        REVBANK_ACCOUNTS.ACCOUNT_NUM = acc_num);
    IF (password = check_pass)
    THEN
        SELECT BALANCE INTO balance_num FROM REVBANK_ACCOUNTS ACCS
        WHERE ACCS.ACCOUNT_NUM = acc_num;
        STATUS := 1;
    ELSE
        STATUS := 0;
    END IF;
END RETRIEVE_BALANCE;
/

CREATE OR REPLACE PROCEDURE UPDATE_BALANCE
(acc_num IN NUMBER, password IN VARCHAR2, change_amt IN NUMBER, status OUT NUMBER) AS
check_pass VARCHAR2(30);
BEGIN
    SELECT USRS.PASSWORD INTO check_pass FROM REVBANK_USERS USRS WHERE
           USERNAME = (SELECT USERNAME FROM REVBANK_ACCOUNTS WHERE
                                        ACCOUNT_NUM = acc_num);
    IF (password = check_pass)
    THEN
        UPDATE REVBANK_ACCOUNTS
        SET BALANCE = BALANCE + change_amt WHERE
        REVBANK_ACCOUNTS.ACCOUNT_NUM = acc_num;
        COMMIT;
        STATUS := 1;
    ELSE
        STATUS := 0;
    END IF;
END UPDATE_BALANCE;
/
