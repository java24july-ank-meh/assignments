/*Drop database if it exists*/
DROP USER bank CASCADE;

/*Create the database user*/
CREATE USER bank
IDENTIFIED BY bank
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to bank;
GRANT resource to bank;
GRANT create session to bank;
GRANT CREATE TABLE TO bank;
GRANT CREATE view To bank;

/*Connect as new user, otherwise will use current user*/
CONNECT bank/bank;

/*Create tables*/
CREATE TABLE BANKUSER (
    USER_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(1000),
    PASSWORD VARCHAR2(2000)
);

CREATE TABLE BANKACCOUNT (
    ACCOUNT_ID INTEGER PRIMARY KEY,
    ACCOUNT_NAME VARCHAR2(100),
    ACCOUNT_BALANCE NUMBER(38),
    USER_ID INTEGER
);


/*Create foreign keys*/
ALTER TABLE BANKACCOUNT ADD CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID)
    REFERENCES BANKUSER (USER_ID) ON DELETE CASCADE;
    /
    
    
/*Stored Procedure*/
CREATE OR REPLACE PROCEDURE SP_DEPOSIT_ACCOUNT
    (A_ID IN NUMBER, AMT IN NUMBER) AS
BEGIN
    UPDATE BANKACCOUNT SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + AMT
        WHERE ACCOUNT_ID = A_ID;
    COMMIT;
END;
/


SELECT * FROM BANKUSER;

/*Create sequences*/
CREATE SEQUENCE SQ_PK_BANKUSER
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_PK_BANKACCOUNT
START WITH 1
INCREMENT BY 1;
/

/*Create triggers*/
CREATE OR REPLACE TRIGGER TR_INSERT_BANKUSER
BEFORE INSERT ON BANKUSER
FOR EACH ROW
BEGIN
    SELECT SQ_PK_BANKUSER.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BANKACCOUNT
BEFORE INSERT ON BANKACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_PK_BANKACCOUNT.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE SP_WITHDRAW_ACCOUNT
    (A_ID IN NUMBER, AMT IN NUMBER) AS
BEGIN
    UPDATE BANKACCOUNT SET ACCOUNT_BALANCE = ACCOUNT_BALANCE - AMT
        WHERE ACCOUNT_ID = A_ID;
    COMMIT;
END;
/
