/*TASK 2.0*/
SELECT * FROM EMPLOYEE;


SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';


SELECT * FROM EMPLOYEE 
    WHERE FIRSTNAME = 'Andrew'
    AND REPORTSTO IS NULL;

/*TASK 2.1*/
SELECT * FROM ALBUM order BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY DESC;

/*TASK 2.3*/

INSERT INTO GENRE (GENREID, NAME) VALUES (1111, 'Swanky');
INSERT INTO GENRE (GENREID, NAME) VALUES(2222, 'GROOVEY');

INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME) VALUES(10101, 'Hugh', 'Mungus');
INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME, TITLE) VALUES(20202, 'Larry', 'David', 'CEO');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME) VALUES (1001, 'Argl', 'TheFlarglbarg');
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME) VALUES (1002, 'Jone', 'Mahone');

/*2.4*/
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

/*2.5*/
SELECT * FROM INVOICE
    WHERE BILLINGADDRESS LIKE 'T%';

/*2.6*/
SELECT * FROM INVOICE 
    WHERE TOTAL BETWEEN 15 AND 20;
    
SELECT * FROM EMPLOYEE  
    WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';
    
/*2.7*/
ALTER TABLE INVOICE
    DROP CONSTRAINT  FK_InvoiceCustomerId ;
  
DELETE FROM  CUSTOMER 
    WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/*3.1*/
BEGIN
    DBMS_OUTPUT.PUT_LINE(CURRENT_TIMESTAMP);
END;
/

SELECT LENGTH(NAME) AS "Length of Name String" FROM MEDIATYPE;

/*3.2*/
CREATE OR REPLACE FUNCTION INVOICE_AVERAGE RETURN NUMBER  IS AVRG NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVRG FROM INVOICE;
    RETURN AVRG;
END;
/

DECLARE AVRG NUMBER;
BEGIN
    AVRG := INVOICE_AVERAGE();
    DBMS_OUTPUT.PUT_LINE('The average total of all invoices is: ' || AVRG);
END;
/

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE RETURN NUMBER  IS TOP NUMBER;
BEGIN
    SELECT MAX(TOTAL) INTO TOP FROM INVOICE;
    RETURN TOP;
END;
/

DECLARE TOP NUMBER;
BEGIN
    TOP := MOST_EXPENSIVE();
    DBMS_OUTPUT.PUT_LINE('The most expensive invoices costs: ' || TOP);
END;
/

/*3.3*/
CREATE OR REPLACE FUNCTION INVOICEL_AVERAGE RETURN NUMBER  IS AVRGL NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVRGL FROM INVOICELINE;
    RETURN AVRGL;
END;
/

DECLARE AVRGL NUMBER;COUNT_I NUMBER; SUM_I NUMBER;
BEGIN
    AVRGL := INVOICEL_AVERAGE();
    DBMS_OUTPUT.PUT_LINE('The average total of all invoiceslines is: ' || AVRGL);
END;

/*SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
/*4.1*/
CREATE OR REPLACE PROCEDURE E_NAMES (S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
        SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
    S SYS_REFCURSOR;
    TEMP_FIRST EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LAST EMPLOYEE.LASTNAME%TYPE;
BEGIN
    E_NAMES(S);
    
    LOOP
        FETCH S INTO TEMP_FIRST, TEMP_LAST;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('FIRST NAME: '||TEMP_FIRST||', LAST NAME: '||TEMP_LAST);
    END LOOP;
    CLOSE S;
END;
/
/*4.2*/

CREATE OR REPLACE PROCEDURE CHANGE_FNAME_TO_MADRONE (E_ID IN NUMBER)AS
BEGIN
    UPDATE EMPLOYEE
    SET FIRSTNAME = 'Madrone'
    WHERE EMPLOYEEID = E_ID;
END;
/


BEGIN
    CHANGE_FNAME_TO_MADRONE(1);
    DBMS_OUTPUT.PUT_LINE('CHANGED EMPLOYEE/S WITH ID: '||1||' TO MADRONE');
END;
/

   
CREATE OR REPLACE PROCEDURE E_MAN (S OUT SYS_REFCURSOR, E_ID IN NUMBER) AS
BEGIN
    OPEN S FOR
        SELECT FIRSTNAME, LASTNAME 
        FROM EMPLOYEE
        WHERE EMPLOYEEID = (
            SELECT REPORTSTO
            FROM EMPLOYEE
            WHERE EMPLOYEEID = E_ID
        );
END;
/

DECLARE
    S SYS_REFCURSOR;
    TEMP_FIRST EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LAST EMPLOYEE.LASTNAME%TYPE;
BEGIN
    E_MAN(S, 2);
    
    DBMS_OUTPUT.PUT_LINE('MANAGER/S OF EMPLOYEE: '||2);
    LOOP
        FETCH S INTO TEMP_FIRST, TEMP_LAST;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('FIRST NAME: '||TEMP_FIRST||', LAST NAME: '||TEMP_LAST);
    END LOOP;
    CLOSE S;
END;
/ 

/*4.3*/
CREATE OR REPLACE PROCEDURE C_INFO ( C_ID IN NUMBER, C_NAME OUT VARCHAR2, C_COMP OUT VARCHAR2) AS
BEGIN
   
        SELECT FIRSTNAME, COMPANY 
        INTO C_NAME, C_COMP
        FROM CUSTOMER
        WHERE CUSTOMERID = C_ID;
        

END;
/

DECLARE
    TEMP_FIRST CUSTOMER.FIRSTNAME%TYPE;
    TEMP_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    C_INFO(1,TEMP_FIRST,TEMP_COMP);
    

        DBMS_OUTPUT.PUT_LINE('FIRST NAME: '||TEMP_FIRST||', COMPANY: '||TEMP_COMP);

END;
/

/*5*/

        
CREATE OR REPLACE PROCEDURE INVOICE_DEL (INV_ID IN NUMBER) AS
BEGIN
    EXECUTE IMMEDIATE 
        'ALTER TABLE INVOICELINE DROP CONSTRAINT FK_InvoiceLineInvoiceId';
   
    DELETE FROM  INVOICE 
        WHERE INVOICEID = INV_ID;
END;
/

BEGIN
    INVOICE_DEL(2);
END;
/


CREATE OR REPLACE PROCEDURE NEW_CUST (CUST_ID IN NUMBER,CUST_FNAME IN VARCHAR2,CUST_LNAME IN VARCHAR2) AS
BEGIN
    
   INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) 
   VALUES (CUST_ID, CUST_FNAME, CUST_LNAME,'PLACEHOLDER@PLACEHOLDER.COM');

END;
/

BEGIN
    NEW_CUST(123,'MADRONE','GOLDMAN');
END;
/

/*6.1*/


CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
  DBMS_OUTPUT.PUT_LINE('Input new empoyee');
END;
/

CREATE OR REPLACE TRIGGER TR_UPDATE_EMPLOYEE
AFTER UPDATE ON EMPLOYEE
BEGIN
  DBMS_OUTPUT.PUT_LINE('Input new row empoyee');
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE_EMPLOYEE
AFTER DELETE ON EMPLOYEE
BEGIN
  DBMS_OUTPUT.PUT_LINE('Deleted empoyee row');
END;
/

/*7.1*/
SELECT * FROM CUSTOMER INNER JOIN INVOICE 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
WHERE INVOICEID = 121;

/*7.2*/
SELECT * FROM CUSTOMER FULL OUTER JOIN INVOICE 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
WHERE INVOICEID = 121
AND CUSTOMER.CUSTOMERID =1 
AND CUSTOMER.FIRSTNAME = 'Luis'
AND CUSTOMER.LASTNAME = 'Gon√ßalves'
AND TOTAL = 3.96;

/*7.3*/
SELECT * FROM ALBUM RIGHT JOIN ARTIST 
ON ARTIST.ARTISTID = ALBUM.ARTISTID
WHERE ARTIST.NAME = 'Pink Floyd 'AND ALBUM.TITLE = 'Dark Side Of The Moon';

/*7.4*/
SELECT * 
FROM ALBUM 
CROSS JOIN ARTIST
ORDER BY NAME ASC ;

/*7.5*/
SELECT *
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO <> B.REPORTSTO;

/*7.6*/
SELECT *
FROM ALBUM AL
INNER JOIN ARTIST AR
    ON AL.ARTISTID = AR.ARTISTID
INNER JOIN TRACK T
    ON AL.ALBUMID = T.ALBUMID
INNER JOIN PLAYLISTTRACK PT
    ON T.TRACKID = PT.TRACKID
INNER JOIN PLAYLIST P
    ON P.PLAYLISTID = PT.PLAYLISTID
INNER JOIN MEDIATYPE M
    ON M.MEDIATYPEID = T.MEDIATYPEID
INNER JOIN GENRE G
    ON G.GENREID = T.GENREID
INNER JOIN INVOICELINE IL
    ON IL.TRACKID = T.TRACKID
INNER JOIN INVOICE I
    ON I.INVOICEID = IL.INVOICEID
INNER JOIN CUSTOMER C
    ON C.CUSTOMERID = I.CUSTOMERID
INNER JOIN EMPLOYEE E
    ON E.EMPLOYEEID = C.SUPPORTREPID;

/*9.0*/
DECLARE name VARCHAR(50); -- database name  
DECLARE path VARCHAR(256); -- path for backup files  
DECLARE fileName VARCHAR(256); -- filename for backup  
DECLARE fileDate VARCHAR(20); -- used for file name
 
-- specify database backup directory
SET @path = 'C:\docs\Revature\Backup'  ;
 
-- specify filename format
SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112); 
 
DECLARE db_cursor CURSOR READ_ONLY FOR  
SELECT name 
FROM master.dbo.sysdatabases 
WHERE name = 'ChinookDB';
 
OPEN db_cursor   
FETCH NEXT FROM db_cursor INTO @name   
 
WHILE @@FETCH_STATUS = 0   
BEGIN   
   SET @fileName = @path + @name + '_' + @fileDate + '.BAK'  
   BACKUP DATABASE @name TO DISK = @fileName  
 
   FETCH NEXT FROM db_cursor INTO @name   
END   

 
CLOSE db_cursor   
DEALLOCATE db_cursor











