DROP USER BANKACCOUNT CASCADE;

CREATE USER bankaccount
IDENTIFIED BY bankaccount
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT CONNECT TO bankaccount;
GRANT RESOURCE TO bankaccount;
GRANT CREATE SESSION TO bankaccount;
GRANT CREATE TABLE TO bankaccount;
GRANT CREATE VIEW TO bankaccount;

CONNECT bankaccount/bankaccount;


DROP TABLE BANKTYPE;
DROP TABLE USER_INFORMATION;
DROP TABLE BANK_INFORMATION;

/**********************************************Tables ****************************************************/
CREATE TABLE BANK_INFORMATION(
BANK_ACCOUNT_ID INTEGER,
ACCOUNT_TYPE VARCHAR(50),
ACCOUNT_BALANCE INTEGER,
USER_ID INTEGER
);

CREATE TABLE USER_INFORMATION(
USER_ID INTEGER PRIMARY KEY,
FIRSTNAME VARCHAR2(50),
LASTNAME VARCHAR(50),
USERNAME VARCHAR(50),
PASSWORDS VARCHAR(50)
);

/***************************************************SEQUENCES******************************************/
CREATE SEQUENCE SQ_PK_USER
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_PK_ACCOUNT
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_FK_ACCOUNT
START WITH 1 
INCREMENT BY 1;
/************************************************TRIGGERS*********************************************/

CREATE OR REPLACE TRIGGER TR_INSERT_USER_ID
BEFORE INSERT ON USER_INFORMATION
FOR EACH ROW
BEGIN
SELECT SQ_PK_USER.NEXTVAL  INTO :NEW.USER_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ID
BEFORE INSERT ON BANK_INFORMATION
FOR EACH ROW
BEGIN
SELECT SQ_PK_ACCOUNT.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
END;
/

/**********************************Table information**************************************************/

INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('CHECKING', 100,1);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('SAVINGS', 250,1);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('SAVINGS', 300,2);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('CHECKING', 412,2);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('CHECKING', 550,3);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('SAVINGS', 550,4);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('CHECKING', 550,4);
INSERT INTO BANK_INFORMATION(ACCOUNT_TYPE, ACCOUNT_BALANCE, USER_ID) VALUES ('CHECKING', 550,5);

INSERT INTO USER_INFORMATION (FIRSTNAME,LASTNAME,USERNAME,PASSWORDS)  VALUES('John',  'Mackie', 'jmac', 'jjjjj');
INSERT INTO USER_INFORMATION (FIRSTNAME,LASTNAME,USERNAME,PASSWORDS) VALUES('Mack',  'Smalls', 'mackk', 'mmmmm');
INSERT INTO USER_INFORMATION(FIRSTNAME,LASTNAME,USERNAME,PASSWORDS)  VALUES('Sara',  'Picket', 'spicket', 'ppppp');
INSERT INTO USER_INFORMATION (FIRSTNAME,LASTNAME,USERNAME,PASSWORDS) VALUES('Mike',  'Brown', 'mbrown', 'mmmmm');
INSERT INTO USER_INFORMATION(FIRSTNAME,LASTNAME,USERNAME,PASSWORDS)  VALUES('Kief',  'Johnson', 'john', 'mmmmm');



/*************************************************Procedures****************************************/

CREATE OR REPLACE PROCEDURE ACCOUNT_DEPOSIT (BNK_ID IN NUMBER, AMOUNT IN NUMBER)
AS
BEGIN
UPDATE BANKINFO SET BALANCE = BALANCE + AMOUNT
WHERE BNK_ID = BANK_ACCOUNT_ID;
COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE ACCOUNT_WITHDRAWAL(BNK_ID IN NUMBER, AMOUNT IN NUMBER)
AS
BEGIN
UPDATE BANKINFO SET BALANCE = BALANCE + AMOUNT
WHERE BNK_ID = BANK_ACCOUNT_ID;
COMMIT;
END;
/

