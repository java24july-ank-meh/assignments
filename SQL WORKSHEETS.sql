
/*2.1*/
select * from EMPLOYEE;
select * from EMPLOYEE where LASTNAME='King';
select * from EMPLOYEE where FIRSTNAME='Andrew' AND REPORTSTO IS NULL;

/*2.2*/
SELECT * FROM ALBUM ORDER BY Title DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

SELECT * FROM GENRE;
/*2.3*/
INSERT INTO GENRE VALUES (26, 'GENERIC');
INSERT INTO GENRE VALUES (27, 'INSTRUMENTAL');
INSERT INTO EMPLOYEE VALUES (9, 'Smith', 'Bob', 'JANITOR', 7, '11-May-97', '12-Jun-03', 'HIDDEN', 'Edmonton', 'AB', 'CANADA', 'T5K 2N1', '1 (303) 421-1441', '1 (303) 421-1441', 'Bob@Chinookcorp.com');
INSERT INTO EMPLOYEE VALUES (10, 'Rose', 'Bob', 'JANITOR', 7, '12-APR-99', '12-JUL-02', 'HIDDEN', 'Edmonton', 'AB', 'CANADA', 'T5K 2N1', '1 (302) 431-1742', '1 (303) 151-9143', 'Bob.1@Chinookcorp.com');
SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER VALUES(60, 'RON', 'Donald', null, '124 Fake Street', 'London', null, 'United Kingdom', 'N1 5LH', null, null, 'Ron@email.com', 3);
INSERT INTO CUSTOMER VALUES(61, 'Joe', 'Michaels', null, '123 Notareal Street', 'London', null, 'United Kingdom', 'N1 5LH', null, null, 'Joe@email.com', 5);

/*2.4*/
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' and LASTNAME = 'Mitchell';
UPDATE ARTIST SET "NAME" = 'CCR' WHERE "NAME" = 'Creedence Clearwater Revival';

/*2.5*/
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/*2.6*/
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 20;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '1-JUN-03' AND '1-MAR-04';

/*2.7*/
/* Just disable constraints since no requirements to keep  integrity */
ALTER TABLE INVOICE DISABLE CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME='Walter';

/*3.1*/
CREATE OR REPLACE FUNCTION FIND_DATE RETURN VARCHAR2 IS
BEGIN
    DECLARE X VARCHAR2(100);
    BEGIN
        X:= Sysdate;
        RETURN X;
    END;
END;
/
BEGIN DBMS_OUTPUT.PUT_LINE('DATE: '||FIND_DATE); END;

CREATE OR REPLACE FUNCTION GETLENGTH(X in NUMBER) RETURN VARCHAR2 IS
BEGIN
    DECLARE VARTMP NUMBER :=0;
    BEGIN
        SELECT nvl((SELECT LENGTH("NAME") FROM MEDIATYPE WHERE MEDIATYPEID = X), 0) INTO VARTMP FROM DUAL;
        RETURN VARTMP;
    END;
END;
/
BEGIN DBMS_OUTPUT.PUT_LINE('LENGTH: '||GETLENGTH(1)); END;

/*3.2*/
CREATE OR REPLACE FUNCTION AVERAGETOT RETURN NUMBER IS
Z NUMBER;
BEGIN
    SELECT nvl((SELECT AVG(TOTAL) FROM INVOICE),0) INTO Z FROM DUAL;
    Return Z;
END;
/
BEGIN DBMS_OUTPUT.PUT_LINE('AVERAGE: '||AVERAGETOT); END;

CREATE OR REPLACE FUNCTION MAXTRACK RETURN NUMBER IS
Z NUMBER;
BEGIN
    SELECT nvl((SELECT MAX(UNITPRICE) FROM TRACK),0) INTO Z FROM DUAL;
    Return Z;
END;
/
BEGIN DBMS_OUTPUT.PUT_LINE('MAXPRICE: '||MAXTRACK); END;

/*3.3*/
CREATE OR REPLACE FUNCTION AVGINVLINE RETURN NUMBER IS
Z NUMBER;
BEGIN
    SELECT nvl((SELECT AVG(UNITPRICE) FROM INVOICELINE),0) INTO Z FROM DUAL;
    Return Z;
END;
/
BEGIN DBMS_OUTPUT.PUT_LINE('AVGINVOICELINE: '||AVGINVLINE); END;

/*3.4*/
CREATE OR REPLACE FUNCTION GETBORNAFTER
  RETURN SYS_REFCURSOR
AS
  my_cursor SYS_REFCURSOR;
BEGIN
  OPEN my_cursor FOR SELECT * FROM EMPLOYEE WHERE BIRTHDATE > to_date('1-JAN-68','DD-MON-YY');
  RETURN my_cursor;
END;
/
DECLARE
    mycursor SYS_REFCURSOR;
BEGIN 
    mycursor:= GETBORNAFTER;
END;
/


/*4.1*/
CREATE OR REPLACE PROCEDURE fetchdata ( p_cursor OUT SYS_REFCURSOR)
IS
    BEGIN
    OPEN p_cursor FOR
       SELECT *
       FROM EMPLOYEE;
    SELECT * FROM p_cursor;
END fetchdata;

DECLARE
    TEMP SYS_REFCURSOR;
BEGIN fetchdata(TEMP); END;

/*4.2*/
CREATE OR REPLACE PROCEDURE PR_UPDATEEMP (CURFNAME in EMPLOYEE.FIRSTNAME%TYPE, CURLNAME IN EMPLOYEE.LASTNAME%TYPE, FNAME in EMPLOYEE.FIRSTNAME%TYPE, EMPLOYEE.LNAME IN LASTNAME%TYPE) is
BEGIN
    UPDATE EMPLOYEE SET FIRSTNAME = FNAME, LASTNAME = LNAME WHERE FIRSTNAME = CURFNAME AND LASTNAME = CURLNAME;
END;
/

DROP TABLE RESULTSTORAGE;
CREATE TABLE RESULTSTORAGE AS SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE PR_GETMANAGER (EID in EMPLOYEE.EMPLOYEEID%TYPE) IS
var1 varchar2(4000);
BEGIN
    var1:='CREATE TABLE RESULTSTORAGE AS SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE WHERE EMPLOYEEID = nvl((SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = '||EID||'),0)';
    EXECUTE IMMEDIATE var1;
END;
/
DROP TABLE RESULTSTORAGE;
BEGIN PR_GETMANAGER(3); END;
SELECT * FROM RESULTSTORAGE;

DELETE FROM RESULTSTORAGE;
/*5*/
CREATE OR REPLACE PROCEDURE DELETEINVOICE (InvID in INVOICE.INVOICEID%TYPE) IS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = InvID;
    DELETE FROM INVOICE WHERE INVOICEID = InvID;
END;
/
CREATE OR REPLACE PROCEDURE NEWCUSTOMER (CID IN CUSTOMER.CUSTOMERID%TYPE, FNAME in CUSTOMER.FIRSTNAME%TYPE, LNAME IN CUSTOMER.LASTNAME%TYPE) IS
BEGIN
    INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME) VALUES (CID, FNAME, LNAME);
END;
/

/*6.1 */
CREATE TABLE EMPBCK AS SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
    DECLARE
    var1 varchar2(4000);
    BEGIN
        var1:= 'DELETE * FROM EMPBCK';
        EXECUTE IMMEDIATE var1;
        var1:= 'SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE INTO EMPBCK';
        EXECUTE IMMEDIATE var1;
    END;
END;
/
CREATE SEQUENCE SQ_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
BEFORE INSERT ON ALBUM
FOR EACH ROW
BEGIN
    SELECT SQ_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED');
END;
/
/*7.1*/
SELECT FIRSTNAME, LASTNAME, INVOICEID FROM CUSTOMER INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
/*7.2*/
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM CUSTOMER FULL OUTER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
/*7.3*/
SELECT TITLE, "NAME" FROM ALBUM RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;
/*7.4*/
SELECT * FROM ARTIST CROSS JOIN ALBUM SORT ORDER BY NAME ASC;
/*7.5*/
SELECT A.FIRSTNAME as FIRSTNAME, A.LASTNAME as LASTNAME, B.FIRSTNAME as REPORTTO FROM EMPLOYEE A, EMPLOYEE B WHERE A.REPORTSTO = B.EMPLOYEEID;
/*7.6*/
SELECT * FROM TRACK INNER JOIN ALBUM ON TRACK.ALBUMID = ALBUM.ALBUMID
INNER JOIN MEDIATYPE ON TRACK.MEDIATYPEID = MEDIATYPE.MEDIATYPEID
INNER JOIN GENRE ON TRACK.GENREID = GENRE.GENREID
INNER JOIN INVOICELINE ON TRACK.TRACKID = INVOICELINE.TRACKID
INNER JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID
INNER JOIN PLAYLISTTRACK ON PLAYLISTTRACK.TRACKID = TRACK.TRACKID
INNER JOIN PLAYLIST ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
INNER JOIN INVOICE ON INVOICE.INVOICEID = INVOICELINE.INVOICEID
INNER JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
/*9*/